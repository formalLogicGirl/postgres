CREATE TABLE cm_test (a int, b text);
CREATE MODULE mtest1
  CREATE FUNCTION m1testa() RETURNS text
     LANGUAGE sql
     RETURN '1x'
  CREATE FUNCTION m1testb() RETURNS text
     LANGUAGE sql
     RETURN '1y';
CREATE SCHEMA temp_mod_test;
GRANT ALL ON SCHEMA temp_mod_test TO public;
CREATE MODULE temp_mod_test.mtest2
  CREATE PROCEDURE m2testa(x text)
  LANGUAGE SQL
  AS $$
  INSERT INTO cm_test VALUES (1, x);
  $$
  CREATE FUNCTION m2testb() RETURNS text
     LANGUAGE sql
     RETURN '2y';
CREATE MODULE mtest3
  CREATE FUNCTION m3testa() RETURNS text
     LANGUAGE sql
     RETURN '3x';
SELECT mtest1.m1testa();
 m1testa 
---------
 1x
(1 row)

SELECT mtest1.m1testb();
 m1testb 
---------
 1y
(1 row)

SELECT public.mtest1.m1testa();
 m1testa 
---------
 1x
(1 row)

SELECT public.mtest1.m1testb();
 m1testb 
---------
 1y
(1 row)

SELECT temp_mod_test.mtest2.m2testb();
 m2testb 
---------
 2y
(1 row)

SELECT temp_mod_test.mtest2.m2testa('x');  -- error
ERROR:  temp_mod_test.mtest2.m2testa(unknown) is a procedure
LINE 1: SELECT temp_mod_test.mtest2.m2testa('x');
               ^
HINT:  To call a procedure, use CALL.
CALL temp_mod_test.mtest2.m2testa('a');  -- ok
CALL temp_mod_test.mtest2.m2testa('xy' || 'zzy');  -- ok, constant-folded arg
ALTER MODULE mtest1 CREATE PROCEDURE m1testc(x text)
  LANGUAGE SQL
  AS $$
  INSERT INTO cm_test VALUES (2, x);
  $$;
CALL mtest1.m1testc('a');  -- ok
-- create and modify functions in modules
ALTER MODULE mtest1 CREATE FUNCTION m1testd() RETURNS text
     LANGUAGE sql
     RETURN 'm1testd';
SELECT mtest1.m1testd();
 m1testd 
---------
 m1testd
(1 row)

ALTER MODULE mtest1 CREATE OR REPLACE FUNCTION m1testd() RETURNS text
     LANGUAGE sql
     RETURN 'm1testd replaced';
SELECT mtest1.m1testd();
     m1testd      
------------------
 m1testd replaced
(1 row)

-- grant and revoke
DROP ROLE IF EXISTS regress_priv_user1;
NOTICE:  role "regress_priv_user1" does not exist, skipping
CREATE USER regress_priv_user1;
ALTER ROLE regress_priv_user1 NOINHERIT;
GRANT CREATE ON SCHEMA public TO regress_priv_user1;
REVOKE ON MODULE mtest1 REFERENCES ON FUNCTION m1testa() FROM public;
REVOKE ON MODULE mtest1 REFERENCES ON FUNCTION m1testb() FROM public;
GRANT ON MODULE mtest1 REFERENCES ON FUNCTION m1testa() TO regress_priv_user1;
REVOKE ON MODULE mtest1 REFERENCES ON FUNCTION m1testb() FROM regress_priv_user1;
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT mtest1.m1testa();  -- ok
 m1testa 
---------
 1x
(1 row)

SELECT mtest1.m1testb();  -- error
ERROR:  permission denied for function m1testb
RESET SESSION AUTHORIZATION;
REVOKE ON MODULE mtest1 REFERENCES ON FUNCTION m1testa() FROM regress_priv_user1;
GRANT ON MODULE mtest1 REFERENCES ON FUNCTION m1testb() TO regress_priv_user1;
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT mtest1.m1testa();  -- error
ERROR:  permission denied for function m1testa
SELECT mtest1.m1testb();  -- ok
 m1testb 
---------
 1y
(1 row)

RESET SESSION AUTHORIZATION;
REVOKE ON MODULE mtest1 REFERENCES ON ALL FUNCTIONS FROM regress_priv_user1;
REVOKE ON MODULE mtest1 CREATE FROM regress_priv_user1;
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT mtest1.m1testa(); -- error
ERROR:  permission denied for function m1testa
SELECT mtest1.m1testb(); -- error
ERROR:  permission denied for function m1testb
ALTER MODULE mtest1 CREATE OR REPLACE FUNCTION m1testf() RETURNS text
     LANGUAGE sql
     RETURN 'm1testf'; -- error
ERROR:  permission denied for module mtest1
RESET SESSION AUTHORIZATION;
GRANT ON MODULE mtest1 REFERENCES ON ALL FUNCTIONS TO regress_priv_user1;
GRANT ON MODULE mtest1 CREATE TO regress_priv_user1;
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT mtest1.m1testa();  -- ok
 m1testa 
---------
 1x
(1 row)

SELECT mtest1.m1testb();  -- ok
 m1testb 
---------
 1y
(1 row)

ALTER MODULE mtest1 CREATE OR REPLACE FUNCTION m1testf() RETURNS text
     LANGUAGE sql
     RETURN 'm1testf';  -- ok
RESET SESSION AUTHORIZATION;
SELECT mtest1.m1testf();  -- ok
 m1testf 
---------
 m1testf
(1 row)

-- rename module and functions in module
ALTER MODULE mtest1 RENAME TO mtest1renamed;
SELECT mtest1.m1testd();  -- error
ERROR:  function mtest1.m1testd() does not exist
LINE 1: SELECT mtest1.m1testd();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT mtest1renamed.m1testd();  -- ok
     m1testd      
------------------
 m1testd replaced
(1 row)

ALTER FUNCTION mtest1renamed.m1testd() RENAME TO m1testdrenamed;
SELECT mtest1renamed.m1testd();  -- error
ERROR:  function mtest1renamed.m1testd() does not exist
LINE 1: SELECT mtest1renamed.m1testd();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT mtest1renamed.m1testdrenamed();  -- ok
  m1testdrenamed  
------------------
 m1testd replaced
(1 row)

-- drop
DROP PROCEDURE mtest1renamed.m1testc(text);
DROP FUNCTION temp_mod_test.mtest2.m2testb();
DROP MODULE mtest1renamed; -- error
ERROR:  cannot drop module mtest1renamed because other objects depend on it
DETAIL:  function public.m1testa() depends on module mtest1renamed
function public.m1testb() depends on module mtest1renamed
function public.m1testdrenamed() depends on module mtest1renamed
function public.m1testf() depends on module mtest1renamed
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- cleanup
DROP MODULE mtest1renamed CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to function public.m1testa()
drop cascades to function public.m1testb()
drop cascades to function public.m1testdrenamed()
drop cascades to function public.m1testf()
DROP MODULE temp_mod_test.mtest2 CASCADE;
NOTICE:  drop cascades to function temp_mod_test.m2testa(text)
DROP OWNED BY regress_priv_user1;
DROP ROLE regress_priv_user1;
DROP SCHEMA temp_mod_test;
DROP TABLE cm_test;
